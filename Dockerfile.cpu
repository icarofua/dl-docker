FROM ubuntu:14.04

MAINTAINER Icaro Olivera de Oliveira <icarofua@gmail.com>

ARG THEANO_VERSION=rel-0.8.2
ARG TENSORFLOW_VERSION=0.11.0
ARG TENSORFLOW_ARCH=cpu
ARG TORCH_VERSION=latest
ARG CAFFE_VERSION=master

# Install some dependencies
RUN apt-get update && apt-get install -y \
		bc \
		build-essential \
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libopenjpeg2 \
		libpng12-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		python-dev \
		software-properties-common \
		unzip \
		vim \
		wget \
		zlib1g-dev \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/* && \
# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
	update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3

# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python get-pip.py && \
	rm get-pip.py

# Add SNI support to Python
RUN pip --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1

# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary
# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)
RUN apt-get update && apt-get install -y \
		python-numpy \
		python-scipy \
		python-nose \
		python-h5py \
		python-skimage \
		python-matplotlib \
		python-pandas \
		python-sklearn \
		python-sympy \
		&& \
	apt-get clean && \
	apt-get autoremove

# Install other useful Python packages using pip
RUN pip --no-cache-dir install --upgrade ipython && \
	pip --no-cache-dir install \
		Cython \
		ipykernel \
		jupyter \
		path.py \
		Pillow \
		pygments \
		six \
		sphinx \
		wheel \
		zmq \
		&& \
	python -m ipykernel.kernelspec


# Install TensorFlow
RUN pip --no-cache-dir install \
	https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl


# Install dependencies for Caffe
RUN apt-get update && apt-get install -y \
		libboost-all-dev \
		libgflags-dev \
		libgoogle-glog-dev \
		libhdf5-serial-dev \
		libleveldb-dev \
		liblmdb-dev \
		libopencv-dev \
		libprotobuf-dev \
		libsnappy-dev \
		protobuf-compiler \
		&& \
	apt-get clean && \
	apt-get autoremove

# Install Caffe
RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe && \
	cd /root/caffe && \
	cat python/requirements.txt | xargs -n1 pip install --upgrade && \
	mkdir build && cd build && \
	cmake -DCPU_ONLY=1 -DBLAS=Open .. && \
	make -j"$(nproc)" all && \
	make install

# Set up Caffe environment variables
ENV CAFFE_ROOT=/root/caffe
ENV PYCAFFE_ROOT=$CAFFE_ROOT/python
ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
	PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH

RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig


# Install Theano and set up Theano config (.theanorc) OpenBLAS
RUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \
	\
	echo "[global]\ndevice=cpu\nfloatX=float32\nmode=FAST_RUN \
		\n[lib]\ncnmem=0.95 \
		\n[nvcc]\nfastmath=True \
		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
		\n[DebugMode]\ncheck_finite=1" \
	> /root/.theanorc


# Install Keras
RUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git


# Install Lasagne
RUN pip --no-cache-dir install git+git://github.com/Lasagne/Lasagne.git


# Install Torch
RUN git clone https://github.com/torch/distro.git /root/torch --recursive && \
	cd /root/torch && \
	bash install-deps && \
	yes no | ./install.sh

# Export the LUA evironment variables manually
ENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \
	LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \
	PATH=/root/torch/install/bin:$PATH \
	LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \
	DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH
ENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH

# Install the latest versions of nn, and iTorch
RUN luarocks install nn && \
	\
	cd /root && git clone https://github.com/facebook/iTorch.git && \
	cd iTorch && \
	luarocks make

# Install opencv git version
RUN apt-get update && apt-get install -y --force-yes build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \
	                    libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev libv4l-dev libatlas-base-dev gfortran \
	                    libxine-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev libtbb-dev libmp3lame-dev \
	                    libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils unzip \
	                    libtesseract-dev python-dev python-tk python3-dev python3-numpy && \
			pip install --upgrade numpy && \
	    apt-get clean

RUN cd /root && git clone https://github.com/Itseez/opencv_contrib.git
RUN cd /root && git clone https://github.com/Itseez/opencv.git
RUN ENV OPENCV_HOME=/root/opencv
RUN ENV OPENCV_CONTRIB_HOME=/root/opencv_contrib
RUN cd $OPENCV_HOME && mkdir release && cd release && \
	          cmake -D CMAKE_BUILD_TYPE=Release \
	            -D CMAKE_INSTALL_PREFIX=/usr \
	            -D PYTHON_EXECUTABLE=/usr/bin/python \
	            -D CMAKE_SKIP_RPATH=ON \
	            -D BUILD_TESTS=OFF \
	            -D ENABLE_SSE=ON \
	            -D ENABLE_SSE2=ON \
	            -D ENABLE_SSE3=ON \
	            -D ENABLE_SSSE3=ON \
	            -D ENABLE_SSE41=ON \
	            -D ENABLE_SSE42=ON \
	            -D BUILD_EXAMPLES=OFF \
	            -D INSTALL_C_EXAMPLES=OFF \
	            -D INSTALL_PYTHON_EXAMPLES=OFF \
	            -D WITH_XINE=OFF \
	            -D WITH_QT=OFF \
	            -D WITH_QT_OPENGL=OFF \
	            -D WITH_UNICAP=OFF \
	            -D WITH_PVAPI=OFF \
	            -D WITH_OPENNI=ON \
	            -D WITH_TBB=OFF \
	            -D WITH_IPP=OFF \
	            -D WITH_CUDA=OFF \
		          -D OPENCV_EXTRA_MODULES_PATH=/root/opencv_contrib/modules \
	            -D USE_FAST_MATH=ON ..

RUN cd $OPENCV_HOME/release && make -j $(nproc) && make install

#Install digits 4.0
RUN apt-get update && apt-get install -y --no-install-recommends git graphviz gunicorn \
  python-dev python-flask python-flaskext.wtf python-gevent \
	python-pil python-protobuf

ENV DIGITS_HOME=/root/DIGITS
RUN cd /root && git clone https://github.com/NVIDIA/DIGITS.git
RUN pip install --upgrade  -r $DIGITS_HOME/requirements.txt
RUN echo "sh $DIGITS_HOME/digits_devserver" > /root/run_digits.sh

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Expose Ports for TensorBoard (6006), Ipython (8888), Digits (5000)
EXPOSE 6006 8888 5000

WORKDIR "/root"
CMD /bin/sh /root/digits/digits_devserver & /bin/bash
